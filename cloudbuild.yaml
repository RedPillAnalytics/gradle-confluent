substitutions:
  _PROJECT: gradle-confluent
  _ARTIFACT_BUCKET: gs://rpa-devops-artifacts
  _DOC_BUCKET: documentation.redpillanalytics.com
  _DOC_PATH: ${_DOC_BUCKET}/${_PROJECT}
  _DOC_REMOTE: s3://${_DOC_PATH}
  _DOC_LOCAL: build/docs/groovydoc/
  _DOC_BASE_URL: https://s3.amazonaws.com/${_DOC_PATH}
  _CACHE_BUCKET: gs://rpa-devops-build-cache
  _ARTIFACT_LOCATION: ${_ARTIFACT_BUCKET}/${_PROJECT}
  _STATUS_FILE: build-status.txt
  # Get repository URL
  _REPO_URL: $(body.repository.html_url)
steps:
- name: gcr.io/rpa-devops/project-version
  id: version
  args:
    - $_REPO_URL
    - $BRANCH_NAME
  waitFor: [ '-' ]
- name: 'docker/compose:1.27.4'
  id: compose
  args:
    - up
    - -d
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  waitFor: ['-']
- name: 'gcr.io/$PROJECT_ID/restore_cache'
  id: restore-cache
  args:
    - '--bucket=$_CACHE_BUCKET'
    - '--key=${_PROJECT}_$( checksum build.gradle )'
  waitFor: ['-']
- name: gcr.io/google.com/cloudsdktool/cloud-sdk
  id: test
  entrypoint: bash
  args:
    - '-cx'
    - |
       ./gradlew cleanLibs build groovydoc runAllTests buildDashboard -PpipelineEndpoint=http://ksqldb-server:8088 -PkafkaServers=kafka:9092 \
       || echo "fail" > ${_STATUS_FILE}
  waitFor:
    - version
    - compose
    - restore-cache
- name: 'gcr.io/$PROJECT_ID/save_cache'
  id: save-cache
  args:
    - '--bucket=$_CACHE_BUCKET'
    - '--key=${_PROJECT}_$( checksum build.gradle )'
    - '--path=.gradle/'
  waitFor:
    - test
- id: test-check
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: 'bash'
  args:
    - '-cx'
    - |
      if [[ $(< ${_STATUS_FILE}) == "fail" ]]
      then
        exit 1
      fi
  waitFor:
    - save-cache
- name: gcr.io/google.com/cloudsdktool/cloud-sdk
  id: publish
  entrypoint: bash
  args:
   - '-cx'
   - |
      if [ $BRANCH_NAME == "master" ]
      then
        ./gradlew publish -Pgradle.publish.key=${_GRADLE_KEY} -Pgradle.publish.secret=${_GRADLE_SECRET}
      fi
  waitFor:
    - test-check
# Need a rewrite of gradle-analytics that doesn't rely on a local git repo
# - name: gcr.io/google.com/cloudsdktool/cloud-sdk
#   id: analytics
#   entrypoint: bash
#   args:
#    - '-c'
#    - |
#       ./gradlew producer
#   waitFor:
#     - publish
- name: amazon/aws-cli
  id: publish-docs
  entrypoint: bash
  args:
   - '-cx'
   - |
      if [ $BRANCH_NAME == "master" ]
      then
        aws s3 sync ${_DOC_LOCAL} ${_DOC_REMOTE}/`<stepvars/version`/ \
        && aws s3 sync ${_DOC_LOCAL} ${_DOC_REMOTE}/latest \
        && echo "Version API documentation located at: ${_DOC_BASE_URL}/`<stepvars/version`/overview-summary.html" \
        && echo "Latest API documentation located at: ${_DOC_BASE_URL}/latest/overview-summary.html"
      fi
  waitFor:
    - test-check
    - publish
timeout: 3600s
options:
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true
  env:
    - GRADLE_USER_HOME=.gradle
    - GRADLE_OPTS="-Dorg.gradle.daemon=false"
    - ORG_GRADLE_PROJECT_analytics_buildTag=$BUILD_ID
    - GITHUB_TOKEN=$_GITHUB_TOKEN
    - AWS_ACCESS_KEY_ID=$_AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY=$_AWS_SECRET_ACCESS_KEY
artifacts:
  objects:
    location: ${_ARTIFACT_LOCATION}
    paths:
      - build/libs/*.jar
