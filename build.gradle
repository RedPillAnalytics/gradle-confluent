plugins {
   id 'groovy'
   id 'java-gradle-plugin'
   id "com.gradle.plugin-publish" version "0.12.0"
   id "de.epitschke.gradle-file-versioning" version "1.0.0"
   id "com.github.breadmoirai.github-release" version "2.2.12"
   id 'org.unbroken-dome.test-sets' version '3.0.1'
   id "com.avast.gradle.docker-compose" version "0.14.0"
   id "com.github.ben-manes.versions" version "0.36.0"
   id "com.redpillanalytics.gradle-analytics" version "1.3.10"
   id 'com.adarshr.test-logger' version '2.1.1'
   id 'build-dashboard'
}

// send analytics
analytics {
   organization = 'Red Pill Analytics'
   bq {
      devops {
         bucket = 'rpa-gradle-analytics'
         dataset = 'gradle_analytics'
      }
   }
}

githubRelease {
   token = githubToken
   owner = 'RedPillAnalytics'
   repo = rootProject.name
   releaseAssets = libsDir.listFiles()
}

dependencies {

   compile gradleApi()
   compile localGroovy()

   compile group: 'org.slf4j', name: 'slf4j-simple', version: '+'
   compile 'com.konghq:unirest-java:+'

   // Gradle Properties
   // It also has the Common library in it, thus the dependency here
   compile "gradle.plugin.com.redpillanalytics:gradle-properties:+"

   // testing
   testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
}

// Default artifact naming.
group = 'com.redpillanalytics'

compileJava {
   options.release = 8
}

repositories {
   jcenter()
   maven {
      url "https://plugins.gradle.org/m2/"
   }
}

gradlePlugin {
   plugins {
      gradleConfluent {
         id = 'com.redpillanalytics.gradle-confluent'
         implementationClass = 'com.redpillanalytics.gradle.ConfluentPlugin'
      }
   }
}

pluginBundle {

   website = 'https://github.com/RedPillAnalytics/gradle-confluent'
   vcsUrl = 'https://github.com/RedPillAnalytics/gradle-confluent'

   plugins {
      gradleConfluent {
         id = 'com.redpillanalytics.gradle-confluent'
         displayName = 'gradle-confluent'
         description = "A plugin for deploying streaming applications to a Confluent Kafka cluster."
         tags = ['kafka', 'confluent', 'ksql', 'streams']
         version = project.version
      }
   }
}

testSets {
   ksqlServerTest
   ksqlPipelinesTest
   deployTest
   buildTest
}

tasks.deployTest.mustRunAfter tasks.buildTest

task cleanJunit(type: Delete) {
   delete getTestResultsDir()
}

task cleanLibs(type: Delete) {
   delete getLibsDir()
}

task runAllTests {
   description 'Run all defined tests.'
   group 'verification'
}

tasks.withType(Test) {
   runAllTests.dependsOn it
   failFast true
   testLogging.showStandardStreams true
   systemProperty 'projectDir', temporaryDir
   systemProperty 'pipelineEndpoint', pipelineEndpoint
   systemProperty 'kafkaServers', kafkaServers
   systemProperty 'analyticsVersion', analyticsVersion
}

//dockerCompose.isRequiredBy tasks.runAllTests

// create a publish task
task publish {
   description 'Custom publish task.'
   group 'publishing'
   dependsOn tasks.publishPlugins, tasks.githubRelease, tasks.build
}

tasks.githubRelease.mustRunAfter tasks.publishPlugins, tasks.build
tasks.deployTest.mustRunAfter tasks.buildTest
